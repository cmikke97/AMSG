import os  # provides a portable way of using operating system dependent functionality
import sys  # system-specific parameters and functions
from time import sleep  # used to suspend execution of the calling thread for the given number of seconds

import pyzipper  # a replacement for Pythonâ€™s zipfile that can read and write AES encrypted zip files
import requests  # simple HTTP library for Python
from logzero import logger  # robust and effective logging for Python


class MalwareBazaarAPI:
    """ Simple Malware Bazaar API class. It implements a few methods to interact with Malware Bazaar Rest API. """

    def __init__(self):
        """ Initialize MalwareBazaarAPI class. """

        # set malware bazaar url
        self.url = 'https://mb-api.abuse.ch/api/v1/'

        # malware bazaar api errors
        self.api_errors = {
            "tag_retrieve": {
                "http_post_expected": "The API expected a HTTP POST request",
                "tag_not_found": "The queried tag is unknown to MalwareBazaar",
                "illegal_tag": "No valid tag provided",
                "no_tag_provided": "The provided text is not a tag",
                "no_results": "Query yielded no results"
            },
            "signature_retrieve": {
                "http_post_expected": "The API expected a HTTP POST request",
                "signature_not_found": "The queried signature is unknown to MalwareBazaar",
                "illegal_signature	": "The provided text is not a valid signature",
                "no_signature_provided": "The provided text is not a signature",
                "no_results": "Query yielded no results"
            },
            "download": {
                "http_post_expected": "The API expected a HTTP POST request",
                "illegal_sha256_hash": "Illegal SHA256 hash provided",
                "no_sha256_hash": "No SHA256 hash provided",
                "file_not_found": "The file was not found or is unknown to MalwareBazaar"
            }
        }

        self.max_limit = 1000

    @staticmethod
    def check_sha256(s):  # (supposedly) sha256 of a malware sample
        """ Check if the one provided is a valid sha256 hash value.

        Args:
            s: (Supposedly) Sha256 of a malware sample
        Returns:
            's' if it is a valid sha256 hash.
        """

        # if s is empty just return
        if s == "":
            return

        # if the length of s is wrong raise exception
        if len(s) != 64:
            raise ValueError("Please use sha256 value instead of '" + s + "'")

        # return s as string
        return str(s)

    def query(self,
              query,  # tag/signature to retrieve metadata of
              qtype='signature',  # type of query to make; valid options are "tag" or "signature"
              amount=10):  # maximum amount of samples' metadata to retrieve
        """ Get a list of malware samples' info (max 1'000) associated with a specific tag.

        Args:
            query: Tag/signature to retrieve metadata of
            qtype: Type of query to make; valid options are "tag" or "signature" (default: 'signature')
            amount: Maximum amount of samples' metadata to retrieve (default: 10, max: 1'000)
        Returns:
            Malware metadata list.
        """

        amount = amount if amount <= 1000 else 1000

        # if the query type is different from expected log error and exit
        if qtype != 'tag' and qtype != 'signature':
            logger.error('Unknown query type. Valid options are "tag" or "signature"')
            sys.exit(1)

        if qtype == 'tag':
            # define data to post to Rest API
            data = {
                'query': 'get_taginfo',  # type of action: retrieve tag metadata
                'tag': str(query),  # retrieve samples' metadata associated with this tag
                'limit': str(amount),  # get the first 'limit' samples
            }
        else:
            # define data to post to Rest API
            data = {
                'query': 'get_siginfo',  # type of action: retrieve signature metadata
                'signature': str(query),  # retrieve samples' metadata associated with this signature
                'limit': str(amount),  # get the first 'limit' samples
            }

        response = None

        while True:
            try:
                # send post request to Malware Bazaar Rest API and retrieve response
                response = requests.post(self.url, data=data, timeout=30)
                break
            except requests.Timeout:
                logger.error("Connection timeout. Retrying in 30 seconds.")
                sleep(30)
                continue

        # decode response content and interpret it as json
        json_response = response.json()

        # get response query status
        query_status = json_response['query_status']
        # if the current query status matches one of the possible errors log error and return None
        if query_status in self.api_errors[qtype + '_retrieve'].keys():
            logger.error(self.api_errors[qtype + '_retrieve'][query_status])
            return None

        # get malware metadata list from response
        malware_list = json_response['data']

        # return malware metadata list
        return malware_list

    def retrieve_malware_sample(self,
                                sha256_hash,  # sha256 hash of the malware sample to retrieve
                                dest_dir,  # destination directory where to save file
                                unzip=False):  # whether to unzip downloaded file or not
        """ Download malware sample from Malware Bazaar given its sha256 hash.

        Args:
            sha256_hash: Sha256 hash of the malware sample to retrieve
            dest_dir: Destination directory where to save file
            unzip: Whether to unzip downloaded file or not (default: False)
        Returns:
            Name list or filename.
        """

        # set zip password
        ZIP_PASSWORD = b'infected'
        # set post header
        headers = {'API-KEY': ''}

        # define data to post to Rest API
        data = {
            'query': 'get_file',  # type of action: retrieve malware sample
            'sha256_hash': self.check_sha256(sha256_hash),  # sha256 of the sample to retrieve
        }

        response = None

        while True:
            try:
                # send post request to Malware Bazaar Rest API and retrieve response
                response = requests.post(self.url, data=data, headers=headers, timeout=30, allow_redirects=True)
                break
            except requests.Timeout:
                logger.error("Connection timeout. Retrying in 30 seconds.")
                sleep(30)
                continue
            except requests.ConnectionError:
                logger.error("A network problem occurred. Skipping..")
                break

        # if Malware Bazaar did not find the file log error and exit
        if 'file_not_found' in response.text:
            logger.error("Error: file not found")
            return None

        # define destination filename as a concatenation of the dest dir with the sha256 hash of the file
        filename = os.path.join(dest_dir, sha256_hash + '.zip')
        # open destination file in binary write mode and write the response content to it
        open(filename, 'wb').write(response.content)

        # if the user selected the unzip option
        if unzip:
            try:
                # open zip file through AESZipFile object of package pyzipper
                with pyzipper.AESZipFile(filename) as zf:
                    # set zip file password
                    zf.pwd = ZIP_PASSWORD
                    # extract all members from the archive to the current working directory
                    _ = zf.extractall(dest_dir)
                    # return list of archive members by name
                    namelist = zf.namelist()
            except pyzipper.zipfile.BadZipFile:
                # remove file and return none
                os.remove(filename)
                logger.error('Downloaded file {} is not a zip file.'.format(filename))
                return None

            # remove zipped version
            os.remove(filename)
            # return name list
            return namelist
        else:
            # return filename
            return [sha256_hash + '.zip']
