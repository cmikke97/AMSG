name: AMSG_workflow

conda_env: conda.yaml

entry_points:
  download_dataset:
    parameters:
      destination_dir: string
    command: "python src/Sorel20mDataset/sorel20mDownloader.py sorel20m_download
                --destination_dir {destination_dir}"

  preprocess_dataset:
    parameters:
      ds_path: path
      destination_dir: string
      training_n_samples: {type: int, default: 0}
      validation_n_samples: {type: int, default: 0}
      test_n_samples: {type: int, default: 0}
      batch_size: {type: int, default: 8192}
      remove_missing_features: string
    command: "python src/Sorel20mDataset/preprocess_dataset.py preprocess_dataset
                --ds_path {ds_path}
                --destination_dir {destination_dir}
                --training_n_samples {training_n_samples}
                --validation_n_samples {validation_n_samples}
                --test_n_samples {test_n_samples}
                --batch_size {batch_size}
                --remove_missing_features {remove_missing_features}"

  train_network:
    parameters:
      ds_path: path
      net_type: {type: string, default: jointEmbedding}
      gen_type: {type: string, default: base}
      run_id: {type: string, default: 0}
      training_run: {type: int, default: 0}
      batch_size: {type: int, default: 8192}
      epochs: {type: int, default: 10}
      training_n_samples: {type: int, default: 0}
      validation_n_samples: {type: int, default: 0}
      use_malicious_labels: {type: int, default: 1}
      use_count_labels: {type: int, default: 1}
      use_tag_labels: {type: int, default: 1}
      workers: {type: int, default: 0}
    command: "python src/Model/train.py train_network
                --ds_path {ds_path}
                --net_type {net_type}
                --gen_type {gen_type}
                --run_id {run_id}
                --training_run {training_run}
                --batch_size {batch_size}
                --epochs {epochs}
                --training_n_samples {training_n_samples}
                --validation_n_samples {validation_n_samples}
                --use_malicious_labels {use_malicious_labels}
                --use_count_labels {use_count_labels}
                --use_tag_labels {use_tag_labels}
                --workers {workers}"

  evaluate_network:
    parameters:
      ds_path: path
      checkpoint_file: path
      net_type: {type: string, default: jointEmbedding}
      gen_type: {type: string, default: base}
      batch_size: {type: int, default: 8192}
      test_n_samples: {type: int, default: 0}
      evaluate_malware: {type: int, default: 1}
      evaluate_count: {type: int, default: 1}
      evaluate_tags: {type: int, default: 1}
    command: "python src/Model/evaluate.py evaluate_network
                --ds_path {ds_path}
                --checkpoint_file {checkpoint_file}
                --net_type {net_type}
                --gen_type {gen_type}
                --batch_size {batch_size}
                --test_n_samples {test_n_samples}
                --evaluate_malware {evaluate_malware}
                --evaluate_count {evaluate_count}
                --evaluate_tags {evaluate_tags}"

  compute_all_run_results:
    parameters:
      results_file: path
      use_malicious_labels: {type: int, default: 1}
      use_tag_labels: {type: int, default: 1}
    command: "python src/Model/plot.py compute_all_run_results
                --results_file {results_file}
                --use_malicious_labels {use_malicious_labels}
                --use_tag_labels {use_tag_labels}"

  plot_all_roc_distributions:
    parameters:
      run_to_filename_json: path
      use_malicious_labels: {type: int, default: 1}
      use_tag_labels: {type: int, default: 1}
    command: "python src/Model/plot.py plot_all_roc_distributions
                --run_to_filename_json {run_to_filename_json}
                --use_malicious_labels {use_malicious_labels}
                --use_tag_labels {use_tag_labels}"

  compute_all_run_fresh_results:
    parameters:
      results_file: path
    command: "python src/Model/plot_fresh.py compute_all_fresh_results
                --results_file {results_file}"

  compute_all_family_class_results:
    parameters:
      results_file: path
      fresh_ds_path: path
    command: "python src/Model/plot_family_classifier.py compute_all_family_class_results
                --results_file {results_file}
                --fresh_ds_path {fresh_ds_path}"

  plot_all_family_class_roc_distributions:
    parameters:
      run_to_filename_json: path
      fresh_ds_path: path
    command: "python src/Model/plot_family_classifier.py plot_all_family_class_roc_distributions
                --run_to_filename_json {run_to_filename_json}
                --fresh_ds_path {fresh_ds_path}"

  build_fresh_dataset:
    parameters:
      dataset_dest_dir: string
    command: "python src/FreshDatasetBuilder/build_fresh_dataset.py build_fresh_dataset
                --dataset_dest_dir {dataset_dest_dir}"

  evaluate_fresh:
    parameters:
      fresh_ds_path: path
      checkpoint_path: path
      net_type: {type: string, default: jointEmbedding}
      min_n_anchor_samples: {type: int, default: 1}
      max_n_anchor_samples: {type: int, default: 10}
      n_query_samples: {type: int, default: 23}
      n_evaluations: {type: int, default: 15}
    command: "python src/Model/evaluate_fresh.py evaluate_fresh
                --fresh_ds_path {fresh_ds_path}
                --checkpoint_path {checkpoint_path}
                --net_type {net_type}
                --min_n_anchor_samples {min_n_anchor_samples}
                --max_n_anchor_samples {max_n_anchor_samples}
                --n_query_samples {n_query_samples}
                --n_evaluations {n_evaluations}"

  train_family_classifier:
    parameters:
      fresh_ds_path: path
      checkpoint_path: {type: string, default: None}
      epochs: {type: int, default: 10}
      train_split_proportion: {type: int, default: 8}
      valid_split_proportion: {type: int, default: 1}
      test_split_proportion: {type: int, default: 1}
      batch_size: {type: int, default: 250}
    command: "python src/Model/train_family_classifier.py train_network
                --fresh_ds_path {fresh_ds_path}
                --checkpoint_path {checkpoint_path}
                --epochs {epochs}
                --train_split_proportion {train_split_proportion}
                --valid_split_proportion {valid_split_proportion}
                --test_split_proportion {test_split_proportion}
                --batch_size {batch_size}"

  evaluate_family_classifier:
    parameters:
      fresh_ds_path: path
      checkpoint_path: path
      train_split_proportion: {type: int, default: 8}
      valid_split_proportion: {type: int, default: 1}
      test_split_proportion: {type: int, default: 1}
      batch_size: {type: int, default: 250}
    command: "python src/Model/evaluate_family_classifier.py evaluate_network
                --fresh_ds_path {fresh_ds_path}
                --checkpoint_path {checkpoint_path}
                --train_split_proportion {train_split_proportion}
                --valid_split_proportion {valid_split_proportion}
                --test_split_proportion {test_split_proportion}
                --batch_size {batch_size}"

  main:
    parameters:
      base_dir: string
      use_cache: {type: int, default: 1}
      ignore_git: {type: int, default: 0}
    command: "python src/main.py workflow
                --base_dir {base_dir}
                --use_cache {use_cache}
                --ignore_git {ignore_git}"

  detection_workflow:
    parameters:
      base_dir: string
      use_cache: {type: int, default: 1}
      ignore_git: {type: int, default: 0}
    command: "python src/main.py detection_workflow
                --base_dir {base_dir}
                --use_cache {use_cache}
                --ignore_git {ignore_git}"

  family_classifier_only:
    parameters:
      base_dir: string
      use_cache: {type: int, default: 1}
      ignore_git: {type: int, default: 0}
    command: "python src/main.py family_classifier_only
                --base_dir {base_dir}
                --use_cache {use_cache}
                --ignore_git {ignore_git}"

  preprocess_ds_multi:
    parameters:
      ds_path: path
      destination_dir: string
      training_n_samples: {type: int, default: 0}
      validation_n_samples: {type: int, default: 0}
      test_n_samples: {type: int, default: 0}
      batch_size: {type: int, default: 8192}
      n_batches: {type: int, default: 10}
      remove_missing_features: string
    command: "python src/Sorel20mDataset/preprocess_ds_multi.py preprocess_ds_multi
                --ds_path {ds_path}
                --destination_dir {destination_dir}
                --training_n_samples {training_n_samples}
                --validation_n_samples {validation_n_samples}
                --test_n_samples {test_n_samples}
                --batch_size {batch_size}
                --n_batches {n_batches}
                --remove_missing_features {remove_missing_features}"

  combine_ds_files:
    parameters:
      ds_path: path
      training_n_samples: {type: int, default: 0}
      validation_n_samples: {type: int, default: 0}
      test_n_samples: {type: int, default: 0}
    command: "python src/Sorel20mDataset/preprocess_ds_multi.py combine_ds_files
                --ds_path {ds_path}
                --training_n_samples {training_n_samples}
                --validation_n_samples {validation_n_samples}
                --test_n_samples {test_n_samples}"

  evaluate_gen3_speed:
    parameters:
      ds_path: path
      json_file_path: string
      net_type: {type: string, default: jointEmbedding}
      batch_size: {type: int, default: 8192}
      min_mul: {type: int, default: 2}
      max_mul: {type: int, default: 32}
      epochs: {type: int, default: 1}
      training_n_samples: {type: int, default: 0}
      use_malicious_labels: {type: int, default: 1}
      use_count_labels: {type: int, default: 1}
      use_tag_labels: {type: int, default: 1}
      workers: {type: int, default: 0}
    command: "python src/Model/gen3_speed_evaluation.py gen3_eval
                --ds_path {ds_path}
                --json_file_path {json_file_path}
                --net_type {net_type}
                --batch_size {batch_size}
                --min_mul {min_mul}
                --max_mul {max_mul}
                --epochs {epochs}
                --training_n_samples {training_n_samples}
                --use_malicious_labels {use_malicious_labels}
                --use_count_labels {use_count_labels}
                --use_tag_labels {use_tag_labels}
                --workers {workers}"

  create_gen3_heatmap:
    parameters:
      json_file_path: path
    command: "python src/Model/gen3_speed_evaluation.py create_gen3_heatmap
                --json_file_path {json_file_path}"

  download_and_extract_features:
    parameters:
      dataset_dest_dir: string
    command: "python src/debug/sorel_samples_downlaoder.py download_and_extract_features
                --dataset_dest_dir {dataset_dest_dir}"
